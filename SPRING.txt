Spring Framework
   The Spring Framework is an open source application framework for the Java platform.
 
J2EE Components
1. Servlets
2. JSP
3. Java Beans
4. Enterprise Java Bean(EJB) - 3 Types
        1. Session Bean - used to write business logic
        2. Entity bean - used to persist data inside db
        3. Message Driven Bean - used to send messages
Drawback of J2EE
J2EE applications tend to contain excessive amounts of "plumbing" code -> 
Thers would always be a high proportion of code that doesn't do anything: JNDI lookup code, Transfer Objects, try/catch blocks to acquire 
and release JDBC resources. Writing and maintaining such plumbing code proves a major drain on resources that should be focused on the 
application's business domain.
 
J2EE applications are hard to unit test -> The J2EE APIs, especially, the EJB component model, does not take into account ease of unit testing. 
It is very difficult to test applications based on EJB and many other J2EE APIs outside an application server.
 
Certain J2EE technologies have failed in performance. EJB 2.x, for instance -> 
The main offender here is entity beans, which have proven little short of disastrous for productivity.
 
 
POJO - contains getters and setters methods, can also contain parameterized constructor
 
Frameworks
There are many frameworks which claim to resolve the issues mentioned earlier. For instance, Struts.
 
Struts is a web framework which works on the web tier and helps us achieve MVC and is doing pretty well in the market. 
However Spring takes over struts in that it is not just a web framework but an application framework.
 
Unlike single-tier frameworks such as Struts or Hibernate, Spring aims to help structure whole applications in a consistent, productive manner. 
It has modules that offer services for use throughout an application.
 
The essence of Spring is in providing enterprise services to Plain Old Java Objects (POJOs). This is valuable in a J2EE environment.
 
 
Advantage of Spring framework
 
Reduce glue code/plumbing work
Spring Framework takes lot of load off the programmer by providing dependencies when required and by using AOP.
 
Externalize dependencies
Dependencies are described in a separate file (xml) rather than mixing it with the business logic code itself. This gives a better control over 
the application.
 
Manage dependencies at a single place
Dependencies can be managed better due to this.
 
Improve testability
Actual code can easily be replaced by a stub for testing purposes.
 
Foster good application design
Since the actual implementation sits behind the interfaces, it fosters good application design.
 
Flexibility
Spring offers integration points with several other frameworks. So, you do not have to write them yourself.
 
 
7 modules
 
1. Spring Core module
               supports IOC(inversion of control) - giving the values separately - ties the software component loosely coupling
               DI(Dependency Injection) -- objects are given their dependencies at runtime by external xml file
        BeanFactory interface makes Spring as a container
 
2. Spring Context module
            - provides dependency injection + it provides internationalization, lifecycle events, integrating with EJB, remoting, 
scheduling,email, JNDI access and integrating with Velocity, freemarker frameworks

       ApplicationContext interface makes Spring as a framework
 
3. Spring AOP (Aspect Oriented Programming)
          -- creating common functionality within the application in a single place
          -- eg: Security, logging, transaction management
 
4. Spring DAO(Data access object) module
         -- We want to develop database processing using Spring itself
 
5. Spring ORM(Object Relational Mapping) module
       -- we integrate Spring with Hibernate,JDO, ibatis framework
 
6. Spring Webflow
      -- we want to integrate Spring with Struts to develop MVC architecture
 
7. Spring MVC
      -- But we want to develop MVC architecture using Spring itself
 
Spring Programs - 3 programs
1. POJO class - properties that contains getters and setters method
2. XML file - used to perform dependency injection
3. main class
 
IOC - Inversion of Control
Dependency Injection
      -- objects are given their dependencies at runtime in separate XML file
3 types of DI
1. Setter Injection - Spring
      -- dependencies are configured through beans setter method for their properties using <property>
2. Constructor Injection - Spring
      -- dependencies are configured through beans constructor for their properties using <constructor-arg>
3. Interface Injection - Avalon
     -- dependencies are configured through interface for their properties
 
Spring Container - 2 types - we perform DI
1. BeanFactory interface
        -- org.springframework.beans.factory.*
        -- It is a lazy loading
        -- Create and destroy the bean
        -- Uses XmlBeanFactory class - load the bean defined in xml file
        -- Object getBean(String id) - used to instantiation the bean and performs DI to the value of the properties
 
2. ApplicationContext Interface
        -- org.springframework.context.*
        -- it is eager loading
        -- Create and destroy the bean and perform DI
        -- 3 classes
              1. ClasspathXmlApplicationContext - loads xml file from classpath(inside src)
              2.FileSystemXmlApplicationContext - loads xml file from file system
             3. WebXmlApplicationContext - loads xml file from project
 
Apache Maven
       -  It is project development tool
      - maven contains 2 types of repository
           1. local repoistory - internally in our machine we create a repository called .m2
           2. remote respository - contains all jar files remotely present in internet
      - configure pom.xml -project object model
                 -- contains the maven dependency for the files
 
Installation
1. Extracted apache maven
2. Configure in environmental variable
    1.M2_HOME   C:\Softwares\apache-maven-3.5.4-bin\apache-maven-3.5.4
    2.Path         C:\Softwares\apache-maven-3.5.4-bin\apache-maven-3.5.4\bin
3. open cmd prompt
            >mvn -version
4. >mvn clean
5. goto c:/users/urnamefolder/.m2
 
 
Spring project
1. create maven project
2. select  - create a simple project
3. Group id: com.pack
    Artifact id: projectname
   Name: projectname
   Packaging: jar
4. configured the pom.xml with dependency
5. copy path right click project - properties- copy path from location
6. Go to cmd prmopt
         > cd "projectpath"
         >mvn clean install
   -- it will get all jar files and downloaded to .m2 folder
7. Rightclick project -- Maven -- Update Project - Check the Force update - click ok
7. create pojo class in src/main/java
8. create xml file in any name inside src or project
    -- used to configure the bean to perform DI
9. create main class
 
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context-3.0.xsd">
 
   <bean id="helo" class="com.pack.Student">
      <property name="stuid" value="100"></property>
      <property name="name" value="ram"></property>
      <property name="city" value="chennai"></property>
   </bean>
 
   <bean id="emp" class="com.pack.Employee">
      <constructor-arg index="0" value="102" type="int"></constructor-arg>
      <constructor-arg index="1" value="Sam" type="java.lang.String"></constructor-arg>
      <constructor-arg index="2" value="25000.0" type="double"></constructor-arg>
   </bean>
   
</beans>
 
 
package com.pack;
 
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.FileSystemXmlApplicationContext;
 
public class Main1 {
 
                public static void main(String[] args) {
                                /*Resource res=new FileSystemResource("hello.xml");
        BeanFactory fact=new XmlBeanFactory(res);
        Employee e=(Employee) fact.getBean("emp");
        System.out.println(e);*/
                               
                                //ApplicationContext context = new ClassPathXmlApplicationContext("hello.xml");
                                ApplicationContext context = new FileSystemXmlApplicationContext("hello.xml");
                          Employee e1=(Employee)context.getBean("emp");
                          System.out.println(e1);
                }
 
}
 
Scope
   - life time of object - 5 types
1. Singleton (default) - we can have only one object for spring bean
2. prototype -- we can multiple object for bean
3. request
4. session
5. global-session
 
ref attribute - used to refer one bean class into another bean class
   ref="id of the bean"
 
package com.pack;
 
public class Job {
   private int jobid;
   private String jobType;
  
public Job() {
                System.out.println("Job class initialized");
}
public int getJobid() {
                return jobid;
}
public void setJobid(int jobid) {
                this.jobid = jobid;
}
public String getJobType() {
                return jobType;
}
public void setJobType(String jobType) {
                this.jobType = jobType;
}
@Override
public String toString() {
                return "Job [jobid=" + jobid + ", jobType=" + jobType + "]";
}
  
}
 
 
package com.pack;
 
public class Person {
   private int pid;
   private String pname;
   private Job job;
  
   
public Person() {
                System.out.println("Person class initialized");
}
public int getPid() {
                return pid;
}
public void setPid(int pid) {
                this.pid = pid;
}
public String getPname() {
                return pname;
}
public void setPname(String pname) {
                this.pname = pname;
}
public Job getJob() {
                return job;
}
public void setJob(Job job) {
                this.job = job;
}
@Override
public String toString() {
                return "Person [pid=" + pid + ", pname=" + pname + ", job=" + job + "]";
}
  
}
 
 
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context-3.0.xsd">
 
<bean id="j" class="com.pack.Job">
    <property name="jobid" value="1000"></property>
    <property name="jobType" value="Manager"></property>
</bean>
 
    <bean id="person" class="com.pack.Person">
      <property name="pid" value="100"></property>
      <property  name="pname" value="Raj"></property>
      <property name="job" ref="j"></property>
     </bean>
</beans>
 
 
package com.pack;
 
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.FileSystemXmlApplicationContext;
 
public class Main2 {
 
                public static void main(String[] args) {
                                ApplicationContext context=new FileSystemXmlApplicationContext("beans.xml");
                                     Person p=(Person)context.getBean("person");
                       System.out.println(p.getPid());
                       System.out.println(p.getPname());
                      System.out.println(p.getJob().getJobid());
                       System.out.println(p.getJob().getJobType());
                }
 
}
 
 
Bean Inheritance
    -- Bean class properties can be inherited using "parent" attribute
 
package com.pack;
 
public class Bean1 {
    private String message1;
    private String message2;
                public String getMessage1() {
                                return message1;
                }
                public void setMessage1(String message1) {
                                this.message1 = message1;
                }
                public String getMessage2() {
                                return message2;
                }
                public void setMessage2(String message2) {
                                this.message2 = message2;
                }
   
}
 
 
package com.pack;
 
public class Bean2 {
  private String message1;
  private String message2;
  private String message3;
public String getMessage1() {
                return message1;
}
public void setMessage1(String message1) {
                this.message1 = message1;
}
public String getMessage2() {
                return message2;
}
public void setMessage2(String message2) {
                this.message2 = message2;
}
public String getMessage3() {
                return message3;
}
public void setMessage3(String message3) {
                this.message3 = message3;
}
 
}
 
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context-3.0.xsd">
 
<bean id="b1" class="com.pack.Bean1">
     <property name="message1" value="Welcome"></property>
     <property name="message2" value="Goodbye"></property>
  </bean>
 
  <bean id="b2" class="com.pack.Bean2" parent="b1">
     <property name="message1" value="Hello"></property>
     <property name="message3" value="Hi"></property>
  </bean>
</beans>
 
package com.pack;
 
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.FileSystemXmlApplicationContext;
 
public class Main3 {
 
                public static void main(String[] args) {
                                ApplicationContext context =new FileSystemXmlApplicationContext("inherit.xml");
                                    Bean1 b1=(Bean1)context.getBean("b1");
             System.out.println(b1.getMessage1());
             System.out.println(b1.getMessage2());
            
             Bean2 b2=(Bean2)context.getBean("b2");
             System.out.println(b2.getMessage1());
             System.out.println(b2.getMessage2());
             System.out.println(b2.getMessage3());
                }
 
}
 
Injecting Collection
    - List,Set,Map,Properties can be injected in Spring
 
package com.pack;
 
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.Set;
 
public class ExampleCollection {
   private List  addrList;
   private Set addrSet;
   private Map addrMap;
   private Properties addrProp;
public List getAddrList() {
                return addrList;
}
public void setAddrList(List addrList) {
                this.addrList = addrList;
}
public Set getAddrSet() {
                return addrSet;
}
public void setAddrSet(Set addrSet) {
                this.addrSet = addrSet;
}
public Map getAddrMap() {
                return addrMap;
}
public void setAddrMap(Map addrMap) {
                this.addrMap = addrMap;
}
public Properties getAddrProp() {
                return addrProp;
}
public void setAddrProp(Properties addrProp) {
                this.addrProp = addrProp;
}
  
   
}
 
 
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context-3.0.xsd">
 
<bean id="collection" class="com.pack.ExampleCollection">
   <property name="addrList">
      <list>
        <value>Chennai</value>
        <value>Salem</value>
        <value>Coimbatore</value>
        <value>Tirchy</value>
        <value>Chennai</value>
      </list>
   </property>
   <property name="addrSet">
      <set>
        <value>Chennai</value>
        <value>Salem</value>
        <value>Coimbatore</value>
        <value>Tirchy</value>
        <value>Chennai</value>
      </set>
   </property>
   <property name="addrMap">
      <map>
        <entry key="1" value="Chennai"/>
        <entry key="2" value="salem"/>
        <entry key="3" value="Chennai"/>
        <entry key="4" value="cimbatore"/>
        <entry key="5" value="ooty"/>
      </map>
   </property>
   <property name="addrProp">
      <props>
        <prop key="one">Chennai</prop>
        <prop key="two">salem</prop>
        <prop key="three">ooty</prop>
        <prop key="four">theni</prop>
       
      </props>
   </property>
</bean>
 
   
</beans>
 
package com.pack;
 
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.FileSystemXmlApplicationContext;
 
public class Main4 {
 
                public static void main(String[] args) {
                                ApplicationContext context=new FileSystemXmlApplicationContext("collect.xml");
                                    ExampleCollection e=(ExampleCollection) context.getBean("collection");
             System.out.println(e.getAddrList());
             System.out.println(e.getAddrSet());
             System.out.println(e.getAddrMap());
             System.out.println(e.getAddrProp());
                }
 
}



Life cycle of Spring bean
1. InitializingBean and DisposableBean callback interface
    public void afterPropertiesSet()
    public void destroy()
ConfigurableApplicationContext interface
abstract class AbstractApplicationContext implements ConfigurableApplicationContext interface
     - void registerShutDownHook() - destroy the bean
 
package com.pack;
 
import org.springframework.beans.factory.DisposableBean;
import org.springframework.beans.factory.InitializingBean;
 
public class Book implements InitializingBean, DisposableBean {
 
    private String name;
 
  
    public void afterPropertiesSet() throws Exception {
        System.out.println("- - - initializing Book bean using initializingBean");
        System.out.println("name: " + name);
    }
 
   
    public void destroy() throws Exception {
        System.out.println("- - - destroying Book bean using DisposableBean");
    }
 
    public String getName() {
        return name;
    }
 
    public void setName(String name) {
        this.name = name;
    }
}
 
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/spring-beans.xsd">
 
    <bean class="com.pack.Book">
        <property name="name" value="Brand New Bookstore"/>
    </bean>
 
</beans>
 
package com.pack;
 
import org.springframework.context.support.AbstractApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;
 
public class Main3 {
 
    public static void main(String... args) throws InterruptedException {
      // ConfigurableApplicationContext context = new ClassPathXmlApplicationContext("beans2.xml");
                 AbstractApplicationContext context = new ClassPathXmlApplicationContext("beans2.xml");
                Book b=context.getBean(Book.class);
       System.out.println(b.getName());
        context.registerShutdownHook();
    }
}
2. Aware interface
3. custom init() and destroy()
init-method="init"   destroy-method="destroy"
registerShutdownHook() - it is going to shutdown the ApplicationContext whenever JVM is shutting down
close() - it is going to shutdown the ApplicationContext at the time it is invoked
 
package com.pack;
 
public class Example1 {
 
    private String name;
 
    public Example1(String name) {
        this.name = name;
    }
 
    public void init(){
        System.out.println("- - - initializing register bean using init-method");
        System.out.println("Register name: " + name);
    }
 
    public void destroy(){
        System.out.println("- - - destroying register bean using destroy-method");
    }
}
 
 
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/spring-beans.xsd">
 
    <bean class="com.pack.Example1"
          init-method="init"
          destroy-method="destroy">
        <constructor-arg name="name" value="Cache Register"/>
    </bean>
 
</beans>
 
 
package com.pack;
 
import org.springframework.context.ConfigurableApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;
 
public class Main4 {
 
    public static void main(String... args) throws InterruptedException {
        ConfigurableApplicationContext context = new ClassPathXmlApplicationContext("beans3.xml");
            Example1 e=context.getBean(Example1.class);
       
       // context.registerShutdownHook();
 
      
        context.close();
    }
}
 
default-init-method="init" default-destroy-method="destroy" in beans tag it is for all bean class
 
package com.pack;
 
public class Course {
 
    private String name;
 
    public void init(){
        System.out.println("- - - initializing course bean using default-init-method");
        System.out.println("name: " + name);
    }
 
    public void destroy(){
        System.out.println("- - - destroying course bean using default-destroy-method");
    }
 
    public void setName(String name) {
        this.name = name;
    }
 
                public String getName() {
                                return name;
                }
   
}
 
package com.pack;
 
public class Course1 {
               
 
                    private String name;
 
                    public void init(){
                        System.out.println("Course1 initializing course bean using default-init-method");
                        System.out.println("name: " + name);
                    }
 
                    public void destroy(){
                        System.out.println("Course1 destroying course bean using default-destroy-method");
                    }
 
                    public void setName(String name) {
                        this.name = name;
                    }
 
                                public String getName() {
                                                return name;
                                }
                   
               
}
 
 
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/spring-beans.xsd"
       default-init-method="init"  >
 
    <bean class="com.pack.Course" >
        <property name="name" value="default init and destroy methods" />
    </bean>
<bean class="com.pack.Course1" >
        <property name="name" value="course1 default init and destroy methods" />
    </bean>
</beans>
 
package com.pack;
 
import org.springframework.context.ApplicationContext;
import org.springframework.context.ConfigurableApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;
 
public class Main1 {
 
    public static void main(String... args) throws InterruptedException {
        ConfigurableApplicationContext context = new ClassPathXmlApplicationContext("beans.xml");
       Course c= context.getBean(Course.class);
       System.out.println(c.getName());
       //context.registerShutdownHook();
       ConfigurableApplicationContext context1 = new ClassPathXmlApplicationContext("beans.xml");
       Course1 c1= context1.getBean(Course1.class);
       System.out.println(c1.getName());
        context.close();
        context1.close();
    }
}
 
4. @PostConstruct and @PreDestroy
package com.pack;
 
import javax.annotation.PostConstruct;
import javax.annotation.PreDestroy;
 
import org.springframework.context.annotation.Scope;
 
//@Scope("prototype")
public class Example {
 
    private int timeout;
 
    public Example(int timeout) {
        this.timeout = timeout;
    }
 
    @PostConstruct
    public void init() throws Exception {
        System.out.println("- - - initializing monitor bean using @PostConstruct");
        System.out.println("timeout: " + timeout);
    }
 
    @PreDestroy
    public void destroy() throws Exception {
        System.out.println("- - - destroying monitor bean using @PreDestroy");
    }
 
                @Override
                public String toString() {
                                return "Example [timeout=" + timeout + "]";
                }
   
}
 
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/context
                           http://www.springframework.org/schema/context/spring-context.xsd">
 
    <context:annotation-config/>
 
    <bean class="com.pack.Example">
        <constructor-arg name="timeout" value="1000"/>
    </bean>
 
</beans>
 
package com.pack;
 
import org.springframework.context.ConfigurableApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;
 
public class Main2 {
 
    public static void main(String... args) throws InterruptedException {
        ConfigurableApplicationContext context = new ClassPathXmlApplicationContext("beans1.xml");
        Example e=context.getBean(Example.class);
        System.out.println(e);
        context.registerShutdownHook();
    }
}
 
Wiring
      -- associating the properties in separate xml files
Autowiring
      -- only instead of using ref attribute, we can go for autowiring
5 types
1. autowire=none -- default, where we have to do wiring using ref attribute
2. autowire=byName - name of the property = id of the bean class in xml file, then it will do autowire by name
 
package com.pack;
 
public class Address {
                private String city;
                private String state;
                public String getCity() {
                                return city;
                }
                public void setCity(String city) {
                                this.city = city;
                }
                public String getState() {
                                return state;
                }
                public void setState(String state) {
                                this.state = state;
                }
} 
 
package com.pack;
 
 
public class Employee {
                private String empName;
               
                private Address address;  //Composition(has-a)
               
                public Employee() {
                                super();
                                // TODO Auto-generated constructor stub
                }
                public Employee (Address address, String empName) {
                                this.address = address;
                                this.empName = empName;
                }
                public String getEmpName() {
                                return empName;
                }
                public void setEmpName(String empName) {
                                this.empName = empName;
                }
                public Address getAddress() {
                                return address;
                }
                public void setAddress(Address address) {
                                this.address = address;
                }
} 
 
 
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context-3.0.xsd">
 
  <bean id="address" class="com.pack.Address">
     <property name="city" value="Chennai"></property>
     <property name="state" value="Tamilnadu"></property>
  </bean>
  <bean id="emp" class="com.pack.Employee" autowire="byName">
      <property name="empName" value="sam"></property>
      <!-- <constructor-arg index="1" value="Sam" type="java.lang.String"></constructor-arg> -->
  </bean>
   
</beans>
 
package com.pack;
 
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;
 
public class Main2 {
 
                public static void main(String[] args) {
                ApplicationContext context=new ClassPathXmlApplicationContext("abc.xml");
                      Employee e=(Employee) context.getBean("emp");
                      System.out.println(e.getEmpName());
                      System.out.println(e.getAddress().getCity());
                      System.out.println(e.getAddress().getState());
                }
 
}
 
 
3. autowire=byType - it is going to do autowiring for the property type must be present in xml file
 
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context-3.0.xsd">
 
   <bean id="addr" class="com.pack.Address">
     <property name="city" value="Chennai"></property>
     <property name="state" value="Tamilnadu"></property>
  </bean>
  <bean id="emp" class="com.pack.Employee" autowire="byType">
      <property name="empName" value="ram"></property>
      <!-- <constructor-arg index="1" value="Sam" type="java.lang.String"></constructor-arg> -->
  </bean>
   
</beans>
 
4.autowire=constructor
       -- it is going to do wiring like byType but through constructor
 
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context-3.0.xsd">
 
   <bean id="addr" class="com.pack.Address">
     <property name="city" value="Chennai"></property>
     <property name="state" value="Tamilnadu"></property>
  </bean>
  <bean id="emp" class="com.pack.Employee" autowire="constructor">
     <!--  <property name="empName" value="ram"></property> -->
     <constructor-arg index="1" value="Sam" type="java.lang.String"></constructor-arg>
  </bean>
   
</beans>
 
5. autowire=autodetect
       -- it is going to do wiring through constructor or through bytype
 
autowire-candidate=true/false
     -- If same bean is configured multiple times in xml file, which bean class has to be invoked it is defined using autowire-candidate
 
package com.pack;
 
public class Job {
 
    private String name;
 
    public void setName(String name) {
        this.name = name;
    }
 
    public String getName() {
                                return name;
                }
 
                @Override
    public String toString() {
        return "Job{" +
                "name='" + name + '\'' +
                '}';
    }
}
 
package com.pack;
import org.springframework.beans.factory.annotation.Autowired;
 
public class Person {
 
    private String name;
    private Job job;
 
    public void setName(String name) {
        this.name = name;
    }
 
   // @Autowired
    public void setJob(Job job) {
        this.job = job;
    }
 
    public String getName() {
                                return name;
                }
 
                public Job getJob() {
                                return job;
                }
 
                @Override
    public String toString() {
        return "Person{" +
                "name='" + name + '\'' +
                ", job=" + job +
                '}';
    }
}
 
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/context
                           http://www.springframework.org/schema/context/spring-context.xsd">
 
    <context:annotation-config/>
 
    <bean  class="com.pack.Job" >
        <property name="name" value="Java Developer"/>
    </bean>
<bean class="com.pack.Job" >
        <property name="name" value="UI Developer"/>
    </bean>
    <bean class="com.pack.Person" autowire="byType" >
        <property name="name" value="John Doe"/>
      
    </bean>
 
</beans>
 
package com.pack;
 
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;
 
public class Main {
                  public static void main(String... args) {
                        ApplicationContext context = new ClassPathXmlApplicationContext("beans.xml");
                        Person person = context.getBean(Person.class);
                        System.out.println(person.getJob().getName());
                    }
}
 
 
primary="true/false"
 
package com.pack;
 
public class Job {
 
    private String name;
 
    public Job(String name) {
        this.name = name;
    }
 
    @Override
    public String toString() {
        return "Job{" +
                "name='" + name + '\'' +
                '}';
    }
}
 
 
package com.pack;
 
import org.springframework.beans.factory.annotation.Autowired;
 
public class Person {
 
    //@Autowired
    private Job job;
 
    public Job getJob() {
                                return job;
                }
 
                public void setJob(Job job) {
                                this.job = job;
                }
 
                @Override
    public String toString() {
        return "Person{" +
                "job=" + job +
                '}';
    }
}
 
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/context
                           http://www.springframework.org/schema/context/spring-context.xsd">
 
    <context:annotation-config/>
 
    <bean class="com.pack.Person" autowire="byType"/>
  
 
 
    <bean class="com.pack.Job" primary="true" >
        <constructor-arg name="name" value="Java Developer"/>
    </bean>
 
    <bean class="com.pack.Job" >
        <constructor-arg name="name" value="Front End Developer"/>
    </bean>
 
</beans>
 
package com.pack;
 
import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.AnnotationConfigApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;
 
public class Main {
 
    public static void main(String... args) {
        ApplicationContext xmlContext = new ClassPathXmlApplicationContext("app-config.xml");
                //ApplicationContext xmlContext = new AnnotationConfigApplicationContext(Config.class);
        Person person = xmlContext.getBean(Person.class);
        System.out.println(person);
    }
}
 
Spring Annotation
   - Spring bean has to be configured in xml file or we can use annotation
 
package com.pack1;
 
public class Example {
   private String message;
 
public String getMessage() {
                return message;
}
 
public void setMessage(String message) {
                this.message = message;
}
  
}
 
 
package com.pack1;
 
public class HelloWorld {
   private String msg;
 
public String getMsg() {
                return msg;
}
 
public void setMsg(String msg) {
                this.msg = msg;
}
  
}
 
 
package com.pack1;
 
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
 
@Configuration //configuration file where u configure all bean classes
public class ExampleConfig {
                @Bean //it is a bean class
                public Example example(){
                                return new Example();
                }
 
                @Bean
                public HelloWorld hello(){
                                return new HelloWorld();
                }
}
 
 
package com.pack1;
 
import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.AnnotationConfigApplicationContext;
 
public class Main {
 
                public static void main(String[] args) {
                                ApplicationContext context=new AnnotationConfigApplicationContext(ExampleConfig.class);
                    Example e=(Example)context.getBean(Example.class);
                    e.setMessage("Spring Annotation");
                    System.out.println(e.getMessage());
                   
                    HelloWorld h=(HelloWorld)context.getBean(HelloWorld.class);
                    h.setMsg("Spring based Annotation");
                    System.out.println(h.getMsg());
                }
 
}



Autowired Annotation
1. @Autowired on setter methods - it is going to work like byType
 
package com.pack;
 
public class Course {
   private int courseid;
   private String cname;
public int getCourseid() {
                return courseid;
}
public void setCourseid(int courseid) {
                this.courseid = courseid;
}
public String getCname() {
                return cname;
}
public void setCname(String cname) {
                this.cname = cname;
}
  
}
 
 
package com.pack;
 
import org.springframework.beans.factory.annotation.Autowired;
 
public class Student {
    private int stuid;
    private String sname;
    private Course course;
                public int getStuid() {
                                return stuid;
                }
                public void setStuid(int stuid) {
                                this.stuid = stuid;
                }
                public String getSname() {
                                return sname;
                }
                public void setSname(String sname) {
                                this.sname = sname;
                }
                public Course getCourse() {
                                return course;
                }
                @Autowired
                public void setCourse(Course course) {
                                this.course = course;
                }
   
}
 
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context-3.0.xsd">
<context:annotation-config/>
<bean id="course" class="com.pack.Course">
   <property name="courseid" value="100"></property>
   <property name="cname" value="Java for beginners"></property>
</bean>
<bean id="stud" class="com.pack.Student">
   <property name="stuid" value="1000"></property>
   <property name="sname" value="Ramu"></property>
</bean>
 
   
</beans>
 
package com.pack;
 
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;
 
public class Main3 {
 
                public static void main(String[] args) {
                                ApplicationContext context=new ClassPathXmlApplicationContext("xyz.xml");
                                    Student st=(Student) context.getBean("stud");
                                    System.out.println(st.getStuid());
                                    System.out.println(st.getSname());
                                    System.out.println(st.getCourse().getCourseid());
                                    System.out.println(st.getCourse().getCname());
                }
 
}
 
2. @Autowired on properties
 
package com.pack;
 
import org.springframework.beans.factory.annotation.Autowired;
 
public class Student {
    private int stuid;
    private String sname;
    @Autowired
    private Course course;
                public int getStuid() {
                                return stuid;
                }
                public void setStuid(int stuid) {
                                this.stuid = stuid;
                }
                public String getSname() {
                                return sname;
                }
                public void setSname(String sname) {
                                this.sname = sname;
                }
                public Course getCourse() {
                                return course;
                }
               
   
}
 
3. @Autowired on constructors
package com.pack;
 
import org.springframework.beans.factory.annotation.Autowired;
 
public class Student {
    private int stuid;
    private String sname;
    @Autowired
    private Course course;
                public int getStuid() {
                                return stuid;
                }
                public void setStuid(int stuid) {
                                this.stuid = stuid;
                }
                public String getSname() {
                                return sname;
                }
                public void setSname(String sname) {
                                this.sname = sname;
                }
                @Autowired
                public Student(int stuid, String sname, Course course) {
                                super();
                                this.stuid = stuid;
                                this.sname = sname;
                                this.course = course;
                }
                public Course getCourse() {
                                return course;
                }
                public void setCourse(Course course) {
                                this.course = course;
                }
               
               
   
}
 
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context-3.0.xsd">
<context:annotation-config/>
<bean id="course" class="com.pack.Course">
   <property name="courseid" value="100"></property>
   <property name="cname" value="Java for beginners"></property>
</bean>
<bean id="stud" class="com.pack.Student">
   <constructor-arg index="0" value="101" type="int"></constructor-arg>
   <constructor-arg index="1" value="Somu" type="java.lang.String"></constructor-arg>
</bean>
 
   
</beans>
 
@Qualifier - used along with @Autowired to remove confusion by specifying which bean will be wired
 
 
package com.pack;
 
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
 
public class Student {
    private int stuid;
    private String sname;
    @Autowired
    private Course course;
                public int getStuid() {
                                return stuid;
                }
                public void setStuid(int stuid) {
                                this.stuid = stuid;
                }
                public String getSname() {
                                return sname;
                }
                public void setSname(String sname) {
                                this.sname = sname;
                }
               
                public Student(int stuid, String sname, Course course) {
                                super();
                                this.stuid = stuid;
                                this.sname = sname;
                                this.course = course;
                }
                public Course getCourse() {
                                return course;
                }
               
                public Student() {
                                super();
                                // TODO Auto-generated constructor stub
                }
                @Autowired
                @Qualifier("course1")
                public void setCourse(Course course) {
                                this.course = course;
                }
               
               
   
}
 
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context-3.0.xsd">
<context:annotation-config/>
<bean id="course" class="com.pack.Course">
   <property name="courseid" value="100"></property>
   <property name="cname" value="Java for beginners"></property>
</bean>
  <bean id="course1" class="com.pack.Course">
   <property name="courseid" value="102"></property>
   <property name="cname" value="J2EE"></property>
</bean>
<bean id="stud" class="com.pack.Student">
  <!--  <constructor-arg index="0" value="101" type="int"></constructor-arg>
   <constructor-arg index="1" value="Somu" type="java.lang.String"></constructor-arg> -->
   <property name="stuid" value="103"></property>
   <property name="sname" value="Rajesh"></property>
</bean>
 
   
</beans>
 
 
@Required - can be applied bean property setter method, and it indicates that the bean property must be initialized otherwise it throws 
BeanInitializationException
 
package com.pack;
 
import org.springframework.beans.factory.annotation.Required;
 
public class Course {
   private int courseid;
   private String cname;
public int getCourseid() {
                return courseid;
}
@Required
public void setCourseid(int courseid) {
                this.courseid = courseid;
}
public String getCname() {
                return cname;
}
public void setCname(String cname) {
                this.cname = cname;
}
  
}
 
 
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context-3.0.xsd">
<context:annotation-config/>
<bean id="course" class="com.pack.Course">
   <property name="courseid" value="100"></property>
   <property name="cname" value="Java for beginners"></property>
</bean>
  <bean id="course1" class="com.pack.Course">
   <!-- <property name="courseid" value="102"></property> -->
   <property name="cname" value="J2EE"></property>
</bean>
<bean id="stud" class="com.pack.Student">
  <!--  <constructor-arg index="0" value="101" type="int"></constructor-arg>
   <constructor-arg index="1" value="Somu" type="java.lang.String"></constructor-arg> -->
   <property name="stuid" value="103"></property>
   <property name="sname" value="Rajesh"></property>
</bean>
 
   
</beans>
 
 
@Primary - it is used instead of primary=true in xml
 
package com.pack;
 
public class Job {
 
    private String name;
 
    public Job(String name) {
        this.name = name;
    }
 
    @Override
    public String toString() {
        return "Job{" +
                "name='" + name + '\'' +
                '}';
    }
}
 
 
package com.pack;
 
import org.springframework.beans.factory.annotation.Autowired;
 
public class Person {
 
    //@Autowired
    private Job job;
 
    public Job getJob() {
                                return job;
                }
 
                public void setJob(Job job) {
                                this.job = job;
                }
 
                @Override
    public String toString() {
        return "Person{" +
                "job=" + job +
                '}';
    }
}
 
 
package com.pack;
 
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Primary;
 
@Configuration
//@ComponentScan(basePackages = "com.pack")
public class Config {
 
    @Bean
    public Person person(){
        return new Person();
    }
 
    @Bean
    @Primary
    public Job javaDeveloper(){
        return new Job("Java Developer");
    }
 
    @Bean
   // @Primary
    public Job frontEndDeveloper(){
        return new Job("Front end Developer");
    }
}
 
package com.pack;
 
import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.AnnotationConfigApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;
 
public class Main {
 
    public static void main(String... args) {
       // ApplicationContext xmlContext = new ClassPathXmlApplicationContext("app-config.xml");
                ApplicationContext xmlContext = new AnnotationConfigApplicationContext(Config.class);
        Person person = xmlContext.getBean(Person.class);
        System.out.println(person);
    }
}
 
 
BeanFactory is lazy loading - it creates the bean only when getBean() is called
 
ApplicationContext is eager loading - preloads all the beans at the time of startup using lazy-init="false"
 
package com.pack;
 
public class Holiday {
 
    public Holiday() {
        System.out.println("Holiday initialized");
    }
 
}
 
package com.pack;
 
public class Workday {
       private Holiday holiday;
      
    public Holiday getHoliday() {
                                return holiday;
                }
 
                public void setHoliday(Holiday holiday) {
                                this.holiday = holiday;
                }
 
                public Workday() {
        System.out.println("Workday initialized");
    }
}
 
 
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/spring-beans.xsd">
 
    <bean class="com.pack.Workday" lazy-init="false">
    <property name="holiday" ref="h"/>
   </bean>
    <bean id="h" class="com.pack.Holiday"  />
 
</beans>
package com.pack;
 
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;
 
public class Main2 {
 
                public static void main(String[] args) {
                                // TODO Auto-generated method stub
                                ApplicationContext context = new ClassPathXmlApplicationContext("beans1.xml");
                                //Resource res=new ClassPathResource("beans1.xml");
                                //BeanFactory context=new XmlBeanFactory(res);
        System.out.println("Application context loaded");
       // Holiday holiday = context.getBean(Holiday.class);
        Workday workday = context.getBean(Workday.class);
 
                }
 
}
 
<context:annotation-config> - indicate we use annotation + we have to do autowiring
 
<context:component-scan> - autodiscover - identify the bean + autowiring
 
@Lazy
 
package com.pack;
 
import org.springframework.context.annotation.Lazy;
import org.springframework.stereotype.Component;
 
@Lazy
@Component
public class Address {
 
    public Address() {
        System.out.println("Address initialized");
    }
 
    @Override
    public String toString() {
        return "Address{}";
    }
}
 
 
package com.pack;
 
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Lazy;
import org.springframework.stereotype.Component;
 
@Component
public class Person {
 
    private @Autowired @Lazy Address address;
 
    public Person() {
        System.out.println("Person initialized");
   }
 
    public Address getAddress() {
        return address;
    }
}
 
 
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/context
                           http://www.springframework.org/schema/context/spring-context.xsd">
 
    <context:component-scan base-package="com.pack"/>
 
</beans>
 
package com.pack;
 
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;
 
public class Main {
 
    public static void main(String... args) throws InterruptedException {
        ApplicationContext context = new ClassPathXmlApplicationContext("beans.xml");
        System.out.println("Application context loaded");
        System.out.println("Getting Person Bean");
        Person person = context.getBean(Person.class);
 
        System.out.println("Waiting...");
        Thread.sleep(1000);
 
        System.out.println("Getting the address");
        Address address = person.getAddress();
        System.out.println(address + ".toString()");
    }
}



